import com.yandex.div.gradle.FileExtensions
import groovy.json.JsonOutput

plugins {
    id 'com.android.application'
    id 'kotlin-parcelize'
    alias(libs.plugins.screenshotTestPlugin)
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.android'
//    id 'org.jetbrains.kotlin.plugin.compose'

}

apply from: "${project.projectDir}/../div-application.gradle"
apply from: "${project.projectDir}/../div-tests.gradle"
apply from: "ui-tests.gradle"

repositories {
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven {

        url = uri("https://api.mapbox.com/downloads/v2/releases/maven")

        // Do not change the username below. It should always be "mapbox" (not your username).

        credentials.username = "mapbox"

        // Use the secret token stored in gradle.properties as the password

//            credentials.password = providers.gradleProperty("MAPBOX_DOWNLOADS_TOKEN").get()
        credentials.password = "sk.eyJ1IjoiYnBrYXplbWkiLCJhIjoiY20zbDliZXpmMGZ3dzJqcXplNXBhdTA3OSJ9.kUYbRXN3L7C8pS97UC6mmQ"

        authentication { basic(BasicAuthentication) }

    }
}

android {
    namespace 'com.yandex.divkit.demo'
//    versionName "1.0.0"
//    versionCode 1
    buildFeatures {
        buildConfig = true
        viewBinding = true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.3" // Use the latest version
    }
    defaultConfig {
//        versionCode divkitVersion.versionCode + divkitVersion.buildNumber
        versionCode 1
        versionName "1.0.0"
        buildConfigField "int", "BUILD_NUMBER", "${divkitVersion.buildNumber}"
        buildConfigField "String", "METRICA_API_KEY", JsonOutput.toJson(project.findProperty("metricaApiKey") ?: "")
        buildConfigField "boolean", "THROW_ASSERTS", project.hasProperty("screenshot-tests")? "false" : "true"
        buildConfigField "String", "HTTP_HEADERS", JsonOutput.toJson(project.findProperty("httpHeaders") ?: "{}")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments useTestStorageService: 'true'

        if (!project.hasProperty("include-regression-tests")) {
            testInstrumentationRunnerArguments.notAnnotation = "com.yandex.alicekit.uitests.annotations.Regression"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    sourceSets {
        main {
            assets.srcDirs += "../../../test_data/"
        }

        debug {
            java.srcDirs = ['src/public/java']
        }

        release {
            java.srcDirs = ['src/public/java']
        }

        test {
            resources.srcDirs += 'src/main/assets' // needed to access assets in unit tests.
        }

        androidTest {
            java.srcDirs += 'src/screenshotTest/java'
        }
    }

    lint {
        baseline file("lint-baseline.xml")
    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_11
//        targetCompatibility JavaVersion.VERSION_11
//    }
//    kotlinOptions {
//        jvmTarget = '11'
//    }
}

dependencies {
    implementation project(path: ':assertion')
    implementation project(path: ':div')
    implementation project(path: ':div-gesture')
    implementation project(path: ':div-json')
    implementation project(path: ':div-lottie')
    implementation project(path: ':div-markdown')
    implementation project(path: ':div-pinch-to-zoom')
    implementation project(path: ':div-rive')
    implementation project(path: ':div-shimmer')
    implementation project(path: ':div-size-provider')
    implementation project(path: ':divkit-regression-testing')
    implementation project(path: ':fonts')
    implementation project(path: ':logging')
    implementation project(path: ':screenshot-test-runtime')
    implementation project(path: ':ui-test-common')
    implementation project(path: ':utils')
    implementation project(path: ':video-custom')
    implementation project(path: ':div-storage')
    implementation project(path: ':div-video')
    implementation project(path: ':picasso')
    implementation project(path: ':glide')
    implementation project(path: ':coil')
    implementation project(path: ':najicamera')

    implementation libs.androidx.browser
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.preference
    implementation libs.androidx.work

    implementation libs.javax

    implementation libs.kotlin.reflect

    implementation libs.okhttp

    implementation libs.markwon

    implementation(libs.appmetrica.lib) {
        exclude group: 'io.appmetrica.analytics', module: 'analytics-identifiers'
    }
    implementation(libs.retrofit)
    implementation(libs.converter.gson)
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.compose.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.compose.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.androidx.material3.android
    implementation libs.androidx.foundation.layout.android
    implementation libs.core
    implementation libs.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.compose.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest

    def room_version = "2.5.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.2.1'

    implementation libs.stetho.core
    implementation libs.stetho.okhttp3
//    implementation("androidx.compose.material3:material3:1.0.1")
    implementation libs.nvWebsocket
    implementation libs.androidx.test.uiautomator
    implementation libs.androidx.coreKtx

    // QR code stuff
    implementation libs.zxing.embedded
    implementation libs.zxing.core

    androidTestUtil libs.androidx.test.services
    androidTestImplementation libs.hamcrest.library
    androidTestImplementation libs.androidx.lifecycle.viewmodel
    androidTestImplementation libs.androidx.viewpager2
}

screenshotTests {
    var isInIde = System.getProperty("idea.active") == "true"
    enabled = project.hasProperty("screenshot-tests") || isInIde
    enableComparison = !project.hasProperty("disable-screenshot-comparison")
    strictComparison = project.hasProperty("screenshot-strict-comparison")
    testAnnotations = ["com.yandex.test.screenshot.Screenshot"]
    referencesDir = "src/screenshotTest/screenshots"
    if (project.hasProperty("screenshot-dir")) {
        screenshotDir = project.property("screenshot-dir")
    }
}

android.applicationVariants.configureEach { variant ->

    variant.outputs.configureEach {
        boolean isPerf = variant.baseName.contains("perf")

        if (!isPerf) {
            outputFileName = divkitVersion.buildNumber != 0 ?
                    "${project.archivesBaseName}-v${versionName}-b${divkitVersion.buildNumber}-${variant.baseName}.apk" :
                    "${project.archivesBaseName}-v${versionName}-${variant.baseName}.apk"
        }
    }
}

FileExtensions.ifExists("${project.projectDir}/build.internal.gradle") {
    apply from: it
}
